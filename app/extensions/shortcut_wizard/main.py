import os
import json
from flask import Blueprint, request, jsonify

shortcut_wizard_bp = Blueprint('shortcut_wizard', __name__)

# The user's home and shortcuts directory
HOME_DIR = os.path.expanduser("~")
SHORTCUTS_DIR = os.path.join(HOME_DIR, '.shortcuts')
METADATA_DIR = os.path.join(SHORTCUTS_DIR, '.metadata')

@shortcut_wizard_bp.route('/create', methods=['POST'])
def create_shortcut():
    """Receives shortcut data and writes it to a new script and metadata file."""
    data = request.get_json()

    if not data or not data.get('filename') or not data.get('command'):
        return jsonify({'error': 'Filename and command are required.'}), 400

    filename = data['filename']
    if '/' in filename or '..' in filename:
        return jsonify({'error': 'Invalid filename.'}), 400

    # --- Assemble the script content ---
    script_content = []
    if data.get('shebang', False):
        script_content.append("#!/data/data/com.termux/files/usr/bin/bash")
    script_content.append(f"# Generated by Termux Extensions Shortcut Wizard v1.2")
    script_content.append("") # Add a blank line

    # Assemble the final command line
    env_vars_str = " ".join([f'{key}="{value}"' for key, value in data.get('env_vars', {}).items()])
    
    args_list = []
    for arg in data.get('args', []):
        option = arg.get('option', '')
        value = arg.get('value', '')
        if option and value:
            args_list.append(f'{option} "{value}"')
        elif option:
            args_list.append(option)
        elif value:
            args_list.append(f'"{value}"')
    
    args_str = " ".join(args_list)

    command_line = f"{env_vars_str} {data['command']} {args_str}".strip()
    
    script_content.append(command_line)
    script_content.append("\n")

    # --- Assemble the metadata content ---
    metadata_content = {
        "wizard_generated": True,
        "version": "1.2",
        "shebang": data.get('shebang', False),
        "command": data.get('command', ''),
        "env_vars": data.get('env_vars', {}),
        "args": data.get('args', [])
    }

    # --- Write the files ---
    try:
        os.makedirs(SHORTCUTS_DIR, exist_ok=True)
        os.makedirs(METADATA_DIR, exist_ok=True)

        script_path = os.path.join(SHORTCUTS_DIR, filename)
        metadata_path = os.path.join(METADATA_DIR, f"{filename}.json")

        with open(script_path, 'w') as f:
            f.write("\n".join(script_content))
        os.chmod(script_path, 0o755)

        with open(metadata_path, 'w') as f:
            json.dump(metadata_content, f, indent=2)

        return jsonify({'status': 'success', 'message': f'Shortcut "{filename}" created.'}), 201

    except Exception as e:
        return jsonify({'error': f'Failed to write shortcut file: {str(e)}'}), 500

@shortcut_wizard_bp.route('/list', methods=['GET'])
def list_shortcuts():
    """Lists all scripts in the shortcuts directory and checks if they are editable."""
    if not os.path.exists(SHORTCUTS_DIR):
        return jsonify([])

    scripts = []
    for filename in os.listdir(SHORTCUTS_DIR):
        if not filename.endswith('.sh'): continue
        script_path = os.path.join(SHORTCUTS_DIR, filename)
        metadata_path = os.path.join(METADATA_DIR, f"{filename}.json")
        scripts.append({
            "name": filename,
            "path": script_path,
            "is_editable": os.path.exists(metadata_path)
        })
    return jsonify(scripts)

@shortcut_wizard_bp.route('/detail', methods=['GET'])
def get_shortcut_detail():
    """Gets the metadata for a single editable shortcut."""
    script_path = request.args.get('path')
    if not script_path:
        return jsonify({'error': 'Script path is required.'}), 400

    filename = os.path.basename(script_path)
    metadata_path = os.path.join(METADATA_DIR, f"{filename}.json")

    if not os.path.exists(metadata_path):
        return jsonify({'error': 'Shortcut is not editable or has no metadata.'}), 404

    try:
        with open(metadata_path, 'r') as f:
            data = json.load(f)
        return jsonify(data)
    except Exception as e:
        return jsonify({'error': f'Failed to read metadata file: {str(e)}'}), 500

@shortcut_wizard_bp.route('/delete', methods=['POST'])
def delete_shortcuts():
    """Deletes one or more shortcuts and their metadata."""
    data = request.get_json()
    if not data or 'paths' not in data:
        return jsonify({'error': 'A list of paths to delete is required.'}), 400

    deleted_count = 0
    errors = []
    for path in data['paths']:
        try:
            filename = os.path.basename(path)
            metadata_path = os.path.join(METADATA_DIR, f"{filename}.json")
            
            if os.path.exists(path):
                os.remove(path)
            if os.path.exists(metadata_path):
                os.remove(metadata_path)
            
            deleted_count += 1
        except Exception as e:
            errors.append(f"Failed to delete {path}: {e}")

    if errors:
        return jsonify({'error': ", ".join(errors), 'deleted_count': deleted_count}), 500
    
    return jsonify({'status': 'success', 'deleted_count': deleted_count})
