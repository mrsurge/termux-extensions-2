# Gemini Agent: Apps Launcher Extension

## 1. High-Level Goal
Build the Apps Launcher extension that lists installed full‑page apps and launches them. It appears alongside other extensions on the home screen and renders a simple, fast icon grid.

## 2. Current Framework Outline (Read First)
- App discovery: `GET /api/apps` returns app manifests (`id`, `name`, `_dir`, `entrypoints`, etc.).
- App loading: apps are served from `/apps/<app_dir>/*` and opened at `/app/<id>` inside a shared App Container (with Home/Reload/title + host API for state). The launcher only navigates; apps handle their own UI and state.
- Per‑app APIs: if an app provides a backend, it is available at `/api/app/<id>/*`. The launcher does not call these.

## 3. Core Tasks (Launcher)
- Fetch apps: In `main.js`, call `window.teFetch('/api/apps')` to get the array of apps.
- Render grid: In `template.html` + `main.js`, render an icon grid (tile per app: icon + name) and include a Refresh button to re‑fetch.
  - Icon rule: use `manifest.icon_emoji` if present; otherwise fallback to the first letter of the app’s `name` or `id`.
- Launch app: On tile click, navigate to `/app/<id>` (e.g., `/app/file_editor`). Prefer `window.location.href = '/app/<id>'`.

## 4. CRITICAL: Development Guardrails
1. DO NOT MODIFY CORE FILES.
2. WORK ONLY WITHIN YOUR EXTENSION DIRECTORY: `/app/extensions/apps/`.
3. USE THE PROVIDED APIs: use `/api/apps` for listing; never read the filesystem directly. App assets are under `/apps/<app_dir>/*`. Per‑app APIs at `/api/app/<id>` are for apps, not the launcher.

## 5. UI & UX Requirements
- States: show Loading, Empty ("No apps found"), and Error (toast + inline message) states.
- Accessibility: each tile should have a `title` attribute using `description || name || id`.
- Performance: avoid reflow-heavy DOM operations; re-render grid content, not the container wrapper.

## 6. Run Context & Permissions
- Run from project root to access shared helpers and templates.
- Write scope is limited to `/app/extensions/apps/`.
- Local helpers available: `window.teFetch` for API calls and `window.teUI.toast(message)` for toasts.
- Manual test: `python app/main.py` → open `/` (launcher visible) → click an app to open `/app/<id>`.

## 7. Definition of Done
- Grid lists all apps from `/api/apps` with proper icons and names.
- Refresh button re-fetches the list and updates the grid.
- Clicking a tile opens the app at `/app/<id>`.
- Clean error handling with toast + inline fallback; no core files modified.
