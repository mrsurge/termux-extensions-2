# Agent Development Guide: Process Manager

## 1. High-Level Goal
Your primary role is to build the "Process Manager" extension. This extension will provide a live, interactive process browser that allows users to view, sort, and manage running processes within their Termux environment. The goal is to give users a powerful tool to handle runaway processes and understand what is running inside their sessions.

## 2. Project Documentation (Required Reading)
To understand the project's architecture and goals, you must read the following documents before starting:
*   `/CORE_API_MANUAL.md`: Your primary reference for interacting with the framework.
*   `/docs/PROJECT_SPECIFICATION.md`: Describes the overall modular architecture.
*   `/PROPOSALS.md`: Contains the design discussions that have shaped the project.

## 3. CRITICAL: Development Guardrails
1.  **DO NOT MODIFY CORE FILES.** Your workspace is strictly confined to `/app/extensions/process_manager/`.
2.  **USE THE PROVIDED APIs.** All system interaction must go through the Core APIs. You will primarily use `POST /api/run_command`.

## 4. Initial Implementation Plan
1.  In your `template.html`, build the UI for the process list using a `<table>` element. The container for this table should have the CSS style `overflow-x: auto;` to enable horizontal scrolling if the content is too wide.
2.  In your `main.js`, implement a function that calls `/api/run_command` with a command like `ps -eo pid,user,%cpu,%mem,comm`.
3.  Parse the `stdout` from the response and dynamically render the process list as rows (`<tr>`) in your table.
4.  For the column that displays the command, apply the following CSS to prevent it from breaking the layout: `max-width: 150px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;`. Also set the `title` attribute of the cell to the full command text.
5.  Add a final column to the table for action buttons like `Kill`, which will call `/api/run_command` with the appropriate `kill` command.
