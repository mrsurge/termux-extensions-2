### Prompt for GPT-5 Codex CLI Agent

**Project Context:**
You are an expert software engineer tasked with enhancing an extension for a Python/Flask-based web framework. The framework, `termux-extensions-2`, provides a web UI to control a Termux environment. Your specific task is to work on the "Shortcut Wizard" extension.

The core framework provides a set of stable, read-only APIs for you to consume. Your entire workspace is confined to the `/app/extensions/shortcut_wizard/` directory.

**File Manifest:**
You will need to read and understand the following files to complete your tasks. All other project files are off-limits.

*   `/app/extensions/shortcut_wizard/manifest.json`
*   `/app/extensions/shortcut_wizard/main.py`
*   `/app/extensions/shortcut_wizard/main.js`
*   `/app/extensions/shortcut_wizard/template.html`
*   `/AGENT_INSTRUCTIONS.md` (Contains API documentation and guardrails)

---

**Critical Guardrails:**
Your primary directive is to **never modify files outside of your assigned extension directory**: `/app/extensions/shortcut_wizard/`. Any attempt to edit core files (`/app/main.py`, `/app/templates/index.html`, etc.) is a violation of the project architecture. You must use the provided Core APIs for all interactions with the system.

---

**Core API Manual:**
*(This is a summary of the relevant parts of `AGENT_INSTRUCTIONS.md` for your convenience)*

*   **`GET /api/browse?path=<path>`**: Lists files and directories at the given path.
*   **`POST /api/ext/shortcut_wizard/create`**: Saves a new shortcut.
    *   **Body**: `{ "filename": "...", "shebang": true/false, "command": "...", "args": [...], "env_vars": {...} }`
*   **`GET /api/ext/shortcut_wizard/list`**: Lists all shortcuts in `~/.shortcuts`.
*   **`GET /api/ext/shortcut_wizard/detail?path=<path>`**: Gets the JSON metadata for an editable shortcut.
*   **`POST /api/ext/shortcut_wizard/delete`**: Deletes shortcuts.
    *   **Body**: `{ "paths": ["/path/to/script1.sh", ...] }`

---

**Your Assigned Tasks:**

1.  **Implement Simple Editor:**
    *   In `main.js`, modify the `renderEditList` function. When a user clicks a shortcut where `is_editable` is `false`, you must:
        1.  Create and show a new, simple modal.
        2.  This modal should contain a `<textarea>` and a "Close" button.
        3.  To get the script's content, you must use the `/api/browse` endpoint. Since this endpoint only lists files and does not read them, you will need to request that the framework maintainer (the user) adds a new core API endpoint: `GET /api/read_file?path=<path>`.
        4.  Once the new endpoint is available, use it to fetch the script's raw text and display it in the `<textarea>`.

2.  **Implement Multi-Command & Piping UI:**
    *   In `template.html`, add a visual separator element that can be inserted between commands (e.g., `<hr class="pipe-separator">`).
    *   In `main.js`, modify the "Add New Command" button's logic. When clicked, it should dynamically create and insert a new "command block" into the editor UI. A command block consists of a command input and its associated arguments section.
    *   In `main.js`, modify the `saveBtn` logic. It must now gather data from all command blocks and send them to the backend as an array in the JSON payload.

3.  **Implement Multi-Command & Piping Backend:**
    *   In `main.py`, update the `/create` endpoint to accept an array of command blocks.
    *   Modify the script generation logic. When multiple command blocks are present, join them in the final `.sh` file with the pipe operator (`|`).

Please begin by reading the files in the manifest and then proceed with **Task 1: Implement Simple Editor**. Acknowledge your understanding of the guardrails before you begin writing any code.
